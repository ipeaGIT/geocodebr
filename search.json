[{"path":"https://ipeagit.github.io/geocodebr/articles/geocodebr.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Introduction to geocodebr","text":"using {geocodebr}, please make sure installed computer. can download either stable version CRAN… … development version GitHub. attach current R session: main function package geocode(), takes data frame addresses input outputs data frame latitude longitude matched address, well two columns indicating precision level matches. demonstrate usage, package includes sample data sets installation. example , use small data set contains addresses commonly seen issues, missing information mistyped fields. Note: Running function first time may take , since {geocodebr} needs download CNEFE data, sums 5.5 GB. data stored locally, downloaded . info data caching . output coordinates use official geodetic reference system used Brazil: SIRGAS2000, CRS(4674). results {geocodebr} classified six broad precision categories depending exactly input address matched CNEFE data. accuracy results indicated two columns output: precision match_type. information .","code":"install.packages(\"geocodebr\") # install.packages(\"pak\") pak::pak(\"ipeaGIT/geocodebr\") library(geocodebr) df <- read.csv(   system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") )  result <- geocodebr::geocode(   addresses_table = df,   address_fields = geocodebr::setup_address_fields(     logradouro = \"nm_logradouro\",     numero = \"Numero\",     cep = \"Cep\",     bairro = \"Bairro\",     municipio = \"nm_municipio\",     estado = \"nm_uf\"   ),   progress = FALSE )  head(result) #>   id            nm_logradouro Numero       Cep               Bairro #> 1  1 RUA MARIA LUCIA PACIFICO     17 26042-730           SANTA RITA #> 2  2      RUA LEOPOLDINA TOME     46 25030-050           CENTENARIO #> 3  3          RUA DONA JUDITE      0 23915-700          CAPUTERA II #> 4  4     RUA ALEXANDRE AMARAL      0 23098-120           SANTISSIMO #> 5  5                AVENIDA E    300 23860-000         PRAIA GRANDE #> 6  6      RUA PRINCESA ISABEL    263 69921-026 ESTACAO EXPERIMENTAL #>      nm_municipio code_muni          nm_uf       lon        lat match_type #> 1     NOVA IGUACU   3303500 RIO DE JANEIRO -43.47118 -22.695496       en01 #> 2 DUQUE DE CAXIAS   3301702 RIO DE JANEIRO -43.31134 -22.779173       en01 #> 3  ANGRA DOS REIS   3300100 RIO DE JANEIRO -44.20848 -22.978837       er01 #> 4  RIO DE JANEIRO   3304557 RIO DE JANEIRO -43.51150 -22.868992       er01 #> 5     MANGARATIBA   3302601 RIO DE JANEIRO -43.97214 -22.929864       en01 #> 6      RIO BRANCO   1200401           ACRE -67.83559  -9.963436       en01 #>   precision #> 1    number #> 2    number #> 3    street #> 4    street #> 5    number #> 6    number"},{"path":"https://ipeagit.github.io/geocodebr/articles/geocodebr.html","id":"precision-categories","dir":"Articles","previous_headings":"","what":"Precision categories:","title":"Introduction to geocodebr","text":"results {geocodebr} classified six broad precision categories: “numero” “numero_interpolado” “rua” “cep” “bairro” “municipio” NA (found) precision level can disaggregated refined match types.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocodebr.html","id":"match-type","dir":"Articles","previous_headings":"Precision categories:","what":"Match Type","title":"Introduction to geocodebr","text":"column match_type provides refined information exactly input address matched CNEFE. every category, {geocodebr} takes average latitude longitude addresses included CNEFE match input address based combinations different fields. strictest case, example, function finds deterministic match fields given address (\"estado\", \"municipio\", \"logradouro\", \"numero\", \"cep\", \"localidade\"). Think example building several apartments match street address number. case, coordinates apartments differ slightly, {geocodebr} takes average coordinates. less rigorous example, fields (\"estado\", \"municipio\", \"logradouro\", \"localidade\") matched, {geocodebr} calculates average coordinates addresses CNEFE along street fall within neighborhood. complete list precision levels, corresponding match type categories fields considered category described : en01: logradouro, numero, cep e bairro en02: logradouro, numero e cep en03: logradouro, numero e bairro en04: logradouro e numero pn01: logradouro, numero, cep e bairro pn02: logradouro, numero e cep pn03: logradouro, numero e bairro pn04: logradouro e numero ei01: logradouro, numero, cep e bairro ei02: logradouro, numero e cep ei03: logradouro, numero e bairro ei04: logradouro e numero pi01: logradouro, numero, cep e bairro pi02: logradouro, numero e cep pi03: logradouro, numero e bairro pi04: logradouro e numero er01: logradouro, cep e bairro er02: logradouro e cep er03: logradouro e bairro er04: logradouro pr01: logradouro, cep e bairro pr02: logradouro e cep pr03: logradouro e bairro pr04: logradouro ec01: municipio, cep, localidade ec02: municipio, cep eb01: municipio, localidade em01: municipio Note: Match types starting ‘p’ use probabilistic matching logradouro field, types starting ‘e’ use deterministic matching . Match types probabilistic matching implemented {geocodebr} yet.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocodebr.html","id":"data-cache","dir":"Articles","previous_headings":"","what":"Data cache","title":"Introduction to geocodebr","text":"first time user runs geocode() function, {geocodebr} download reference files store locally. way, data needs downloaded . Mind files require approximately 4GB space local drive. package includes following functions help users manage cached files: get_cache_dir(): returns path cached data stored. default, files cached package directory. set_cache_dir(): set custom directory used. configuration persistent across different R sessions. list_cached_data(): list files currently cached clean_cache_dir(): delete files cache directory used {geocodebr}","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_en.html","id":"geocoding-from-addresses-to-spatial-coordinates","dir":"Articles","previous_headings":"","what":"Geocoding: from addresses to spatial coordinates","title":"Geocoding with geocodebr (ENG)","text":"table (data.frame) addresses, geolocating data {geocodebr} can done two simple steps: first step use setup_address_fields() function declare names columns input data.frame correspond field addresses. second step use geocode() function find geographic coordinates input addresses. obs. Note first time user runs function, {geocodebr} download files store locally. way, data needs downloaded . info data caching . output coordinates use official geodetic reference system used Brazil: SIRGAS2000, CRS(4674). results {geocodebr} classified six broad precision categories depending exactly input address matched CNEFE data. accuracy results indicated two columns output: precision match_type. information .","code":"library(geocodebr)  # read input sample data input_df <- read.csv(system.file(\"extdata/small_sample.csv\", package = \"geocodebr\"))  # 1st step: indicate the columns describing the address fields fields <- geocodebr::setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\"   ) # 2nd step: geocode df <- geocodebr::geocode(   addresses_table = input_df,   address_fields = fields,   n_cores = 1,   progress = FALSE   )  head(df) #>   id            nm_logradouro Numero       Cep               Bairro #> 1  1 RUA MARIA LUCIA PACIFICO     17 26042-730           SANTA RITA #> 2  2      RUA LEOPOLDINA TOME     46 25030-050           CENTENARIO #> 3  3          RUA DONA JUDITE      0 23915-700          CAPUTERA II #> 4  4     RUA ALEXANDRE AMARAL      0 23098-120           SANTISSIMO #> 5  5                AVENIDA E    300 23860-000         PRAIA GRANDE #> 6  6      RUA PRINCESA ISABEL    263 69921-026 ESTACAO EXPERIMENTAL #>      nm_municipio code_muni          nm_uf       lon        lat match_type #> 1     NOVA IGUACU   3303500 RIO DE JANEIRO -43.47118 -22.695496       en01 #> 2 DUQUE DE CAXIAS   3301702 RIO DE JANEIRO -43.31134 -22.779173       en01 #> 3  ANGRA DOS REIS   3300100 RIO DE JANEIRO -44.20848 -22.978837       er01 #> 4  RIO DE JANEIRO   3304557 RIO DE JANEIRO -43.51150 -22.868992       er01 #> 5     MANGARATIBA   3302601 RIO DE JANEIRO -43.97214 -22.929864       en01 #> 6      RIO BRANCO   1200401           ACRE -67.83559  -9.963436       en01 #>   precision #> 1    number #> 2    number #> 3    street #> 4    street #> 5    number #> 6    number"},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_en.html","id":"precision-categories","dir":"Articles","previous_headings":"","what":"Precision categories:","title":"Geocoding with geocodebr (ENG)","text":"results {geocodebr} classified six broad precision categories: “numero” “numero_interpolado” “rua” “cep” “bairro” “municipio” NA (found) precision level can disaggregated refined match types.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_en.html","id":"match-type","dir":"Articles","previous_headings":"Precision categories:","what":"Match Type","title":"Geocoding with geocodebr (ENG)","text":"column match_type provides refined information exactly input address matched CNEFE. every category, {geocodebr} takes average latitude longitude addresses included CNEFE match input address based combinations different fields. strictest case, example, function finds deterministic match fields given address (\"estado\", \"municipio\", \"logradouro\", \"numero\", \"cep\", \"localidade\"). Think example building several apartments match street address number. case, coordinates apartments differ slightly, {geocodebr} takes average coordinates. less rigorous example, fields (\"estado\", \"municipio\", \"logradouro\", \"localidade\") matched, {geocodebr} calculates average coordinates addresses CNEFE along street fall within neighborhood. complete list precision levels, corresponding match type categories fields considered category described : en01: logradouro, numero, cep e bairro en02: logradouro, numero e cep en03: logradouro, numero e bairro en04: logradouro e numero pn01: logradouro, numero, cep e bairro pn02: logradouro, numero e cep pn03: logradouro, numero e bairro pn04: logradouro e numero ei01: logradouro, numero, cep e bairro ei02: logradouro, numero e cep ei03: logradouro, numero e bairro ei04: logradouro e numero pi01: logradouro, numero, cep e bairro pi02: logradouro, numero e cep pi03: logradouro, numero e bairro pi04: logradouro e numero er01: logradouro, cep e bairro er02: logradouro e cep er03: logradouro e bairro er04: logradouro pr01: logradouro, cep e bairro pr02: logradouro e cep pr03: logradouro e bairro pr04: logradouro ec01: municipio, cep, localidade ec02: municipio, cep eb01: municipio, localidade em01: municipio Note: Match types starting ‘p’ use probabilistic matching logradouro field, types starting ‘e’ use deterministic matching . Match types probabilistic matching implemented {geocodebr} yet.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_en.html","id":"data-cache","dir":"Articles","previous_headings":"","what":"Data cache","title":"Geocoding with geocodebr (ENG)","text":"first time user runs geocode() function, {geocodebr} download reference files store locally. way, data needs downloaded . Mind files require approximately 4GB space local drive. package includes following functions help users manage cached files: get_cache_dir(): returns path cached data stored. default, files cached package directory. set_cache_dir(): set custom directory used. configuration persistent across different R sessions. list_cached_data(): list files currently cached clean_cache_dir(): delete files cache directory used {geocodebr}","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_pt.html","id":"geocodificação-de-endereços-para-coordenadas-espaciais","dir":"Articles","previous_headings":"","what":"Geocodificação: de endereços para coordenadas espaciais","title":"Geolocalização com geocodebr (PORT)","text":"Uma vez que você tenha uma tabela (data.frame) com endereços, geolocalização dos dados com {geocodebr} pode ser feita em dois passos simples: O primeiro passo é utilizar função setup_address_fields() para declarar os nomes das colunas seu data.frame que correspondem cada campo dos endereços. O segundo passo é utilizar função geocode() para encontrar coordenadas geográficas dos endereços de entrada. obs. Note que na primeira vez que o usuário usa essa fnução, {geocodebr} irá baixar alguns arquivos de referência e armaneza-los localmente. Assim, esses dados só precisam ser baixados uma única vez. Mais informações sobr o cache dos dados abaixo. coordendas espaciais output usam sistema de referência ofical Brasil: SIRGAS2000, CRS(4674). Os resultados {geocodebr} são classificados em seis amplas categorias de precisão, dependendo de quão exatamente cada endereço de entrada foi correspondido com os dados CNEFE. O grau de precisão é indicado em duas colunas da tabela de output: precision e match_type. Mais informações abaixo.","code":"library(geocodebr)  # leitura de dados de input input_df <- read.csv(system.file(\"extdata/small_sample.csv\", package = \"geocodebr\"))  # 1o passo: indicar nome das colunas correspondento aos campos de endereço fields <- geocodebr::setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\"   ) # 2o passo: geolocalização df <- geocodebr::geocode(   addresses_table = input_df,   address_fields = fields,   n_cores = 1,   progress = FALSE   )  head(df) #>   id            nm_logradouro Numero       Cep               Bairro #> 1  1 RUA MARIA LUCIA PACIFICO     17 26042-730           SANTA RITA #> 2  2      RUA LEOPOLDINA TOME     46 25030-050           CENTENARIO #> 3  3          RUA DONA JUDITE      0 23915-700          CAPUTERA II #> 4  4     RUA ALEXANDRE AMARAL      0 23098-120           SANTISSIMO #> 5  5                AVENIDA E    300 23860-000         PRAIA GRANDE #> 6  6      RUA PRINCESA ISABEL    263 69921-026 ESTACAO EXPERIMENTAL #>      nm_municipio code_muni          nm_uf       lon        lat match_type #> 1     NOVA IGUACU   3303500 RIO DE JANEIRO -43.47118 -22.695496       en01 #> 2 DUQUE DE CAXIAS   3301702 RIO DE JANEIRO -43.31134 -22.779173       en01 #> 3  ANGRA DOS REIS   3300100 RIO DE JANEIRO -44.20848 -22.978837       er01 #> 4  RIO DE JANEIRO   3304557 RIO DE JANEIRO -43.51150 -22.868992       er01 #> 5     MANGARATIBA   3302601 RIO DE JANEIRO -43.97214 -22.929864       en01 #> 6      RIO BRANCO   1200401           ACRE -67.83559  -9.963436       en01 #>   precision #> 1    number #> 2    number #> 3    street #> 4    street #> 5    number #> 6    number"},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_pt.html","id":"categorias-de-precisão-precision","dir":"Articles","previous_headings":"","what":"Categorias de Precisão: precision","title":"Geolocalização com geocodebr (PORT)","text":"Os resultados {geocodebr} são classificados em seis amplas categorias de precision: “numero” “numero_interpolado” “rua” “cep” “bairro” “municipio” NA (não encontrado) Cada nível de precisão pode ser desagregado em tipos de correspondência mais refinados.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_pt.html","id":"tipo-de-correspondência-match_type","dir":"Articles","previous_headings":"Categorias de Precisão: precision","what":"Tipo de Correspondência: match_type","title":"Geolocalização com geocodebr (PORT)","text":"coluna match_type fornece informações mais detalhadas sobre como exatamente cada endereço de entrada foi encontrado CNEFE. Em cada categoria, o {geocodebr} calcula média da latitude e longitude dos endereços incluídos CNEFE que correspondem ao endereço de entrada, com base em combinações de diferentes campos. caso mais rigoroso, por exemplo, função encontra uma correspondência determinística para todos os campos de um dado endereço (\"estado\", \"municipio\", \"logradouro\", \"numero\", \"cep\", \"localidade\"). Pense, por exemplo, em um prédio com vários apartamentos que correspondem ao mesmo endereço de rua e número. Nesse caso, coordenadas dos apartamentos podem diferir ligeiramente, e o {geocodebr} calcula média dessas coordenadas. Em um caso menos rigoroso, qual apenas os campos (\"estado\", \"municipio\", \"logradouro\", \"localidade\") são encontrados, o {geocodebr} calcula coordenadas médias de todos os endereços CNEFE ao longo daquela rua e que se encontram mesmo bairro. Assim, coordenadas de resultado tendem ser o ponto médio trecho daquela rua que passa dentro daquele bairro. lista completa dos níveis de precisão (precision), suas categorias de tipo de correspondência (match_type) e os campos de endereço considerados em cada categoria estão descritos abaixo: en01: logradouro, numero, cep e bairro en02: logradouro, numero e cep en03: logradouro, numero e bairro en04: logradouro e numero pn01: logradouro, numero, cep e bairro pn02: logradouro, numero e cep pn03: logradouro, numero e bairro pn04: logradouro e numero ei01: logradouro, numero, cep e bairro ei02: logradouro, numero e cep ei03: logradouro, numero e bairro ei04: logradouro e numero pi01: logradouro, numero, cep e bairro pi02: logradouro, numero e cep pi03: logradouro, numero e bairro pi04: logradouro e numero er01: logradouro, cep e bairro er02: logradouro e cep er03: logradouro e bairro er04: logradouro pr01: logradouro, cep e bairro pr02: logradouro e cep pr03: logradouro e bairro pr04: logradouro ec01: municipio, cep, localidade ec02: municipio, cep eb01: municipio, localidade em01: municipio Nota: categorias de match_type que começam com ‘p’ utilizam correspondência probabilística campo logradouro, enquanto os tipos que começam com ‘e’ utilizam apenas correspondência determinística. categorias de match_type que usam correspondência probabilística ainda não estão implementados {geocodebr}.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/geocoding_pt.html","id":"cache-de-dados","dir":"Articles","previous_headings":"","what":"Cache de Dados","title":"Geolocalização com geocodebr (PORT)","text":"Na primeira vez que o usuário executar função geocode(), o {geocodebr} irá baixar alguns arquivos de referência e armazená-los localmente. Dessa forma, os dados precisam ser baixados apenas uma vez. Vale lembrar que esses arquivos requerem aproximadamente 4GB de espaço seu disco local. O pacote inclui seguintes funções para ajudar os usuários gerenciar os arquivos em cache: get_cache_dir(): retorna o caminho para onde os dados em cache estão armazenados. Por padrão, os arquivos são armazenados diretório pacote. set_cache_dir(): define um diretório personalizado ser usado. Essa configuração é persistente entre diferentes sessões R. list_cached_data(): lista todos os arquivos atualmente armazenados em cache. clean_cache_dir(): exclui todos os arquivos diretório de cache usado pelo {geocodebr}.","code":""},{"path":"https://ipeagit.github.io/geocodebr/articles/reverse_geocoding.html","id":"reverse-geocoding-from-spatial-coordinates-to-addresses","dir":"Articles","previous_headings":"","what":"Reverse-geocoding: from spatial coordinates to addresses","title":"Reverse-geocoding (ENG)","text":"coming soon.","code":""},{"path":"https://ipeagit.github.io/geocodebr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Herszenhut. Author, maintainer. Rafael H. M. Pereira. Author. Ipea - Institute Applied Economic Research. Copyright holder, funder.","code":""},{"path":"https://ipeagit.github.io/geocodebr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pereira RHM (2024). geocodebr: Download Data Brazil's Population Census.","code":"@Manual{,   title = {geocodebr: Download Data from Brazil's Population Census},   author = {Rafael H. M. Pereira},   year = {2024},   version = {v0.1.0}, }"},{"path":"https://ipeagit.github.io/geocodebr/index.html","id":"geocodebr","dir":"","previous_headings":"","what":"Geocode Brazilian Addresses with CNEFE","title":"Geocode Brazilian Addresses with CNEFE","text":"geocodebr package enables one geocode Brazilian addresses using National Registry Addresses Statistical Purposes (english Cadastro Nacional de Endereços para Fins Estatísticos, CNEFE). CNEFE published Brazilian official statistics geography office, IBGE.","code":""},{"path":"https://ipeagit.github.io/geocodebr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geocode Brazilian Addresses with CNEFE","text":"package yet CRAN. can install development version :","code":"# install.packages(\"pak\") pak::pak(\"ipeaGIT/geocodebr\")"},{"path":"https://ipeagit.github.io/geocodebr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Geocode Brazilian Addresses with CNEFE","text":"Soon.","code":""},{"path":"https://ipeagit.github.io/geocodebr/index.html","id":"acknowledgement-","dir":"","previous_headings":"","what":"Acknowledgement","title":"Geocode Brazilian Addresses with CNEFE","text":"geocodebr developed team Institute Applied Economic Research (Ipea), Brazil.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/add_precision_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column with info of geocode match_type — add_precision_col","title":"Add a column with info of geocode match_type — add_precision_col","text":"Add column info geocode match_type","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/add_precision_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column with info of geocode match_type — add_precision_col","text":"","code":"add_precision_col(con, update_tb = NULL)"},{"path":"https://ipeagit.github.io/geocodebr/reference/add_precision_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column with info of geocode match_type — add_precision_col","text":"con db connection update_tb String. Name table updated con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/add_precision_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column with info of geocode match_type — add_precision_col","text":"Adds new column table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/arrow_open_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely use arrow to open a Parquet file — arrow_open_dataset","title":"Safely use arrow to open a Parquet file — arrow_open_dataset","text":"function handles failure modes, including Parquet file corrupted.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/arrow_open_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely use arrow to open a Parquet file — arrow_open_dataset","text":"","code":"arrow_open_dataset(filename)"},{"path":"https://ipeagit.github.io/geocodebr/reference/arrow_open_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely use arrow to open a Parquet file — arrow_open_dataset","text":"filename local Parquet file","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/arrow_open_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely use arrow to open a Parquet file — arrow_open_dataset","text":"arrow::Dataset","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/cache_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Message when caching file — cache_message","title":"Message when caching file — cache_message","text":"Message caching file","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/cache_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Message when caching file — cache_message","text":"","code":"cache_message(   local_file = parent.frame()$local_file,   cache = parent.frame()$cache )"},{"path":"https://ipeagit.github.io/geocodebr/reference/cache_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Message when caching file — cache_message","text":"local_file address file passed download_file function. cache Logical. Whether cached data used.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/cache_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Message when caching file — cache_message","text":"message","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/clean_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the cache directory used in geocodebr — clean_cache_dir","title":"Clean the cache directory used in geocodebr — clean_cache_dir","text":"Removes files stored locally cache directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/clean_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the cache directory used in geocodebr — clean_cache_dir","text":"","code":"clean_cache_dir()"},{"path":"https://ipeagit.github.io/geocodebr/reference/clean_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean the cache directory used in geocodebr — clean_cache_dir","text":"message.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/clean_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean the cache directory used in geocodebr — clean_cache_dir","text":"","code":"clean_cache_dir() #> Cached files from {geocodebr} have been deleted from /home/runner/.cache/R/geocodebr/data_release_v0.1.0"},{"path":"https://ipeagit.github.io/geocodebr/reference/create_geocodebr_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Build duckdb connection with CNEFE data set — create_geocodebr_db","title":"Build duckdb connection with CNEFE data set — create_geocodebr_db","text":"Builds duckdb connection CNEFE data set cache direcotry.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/create_geocodebr_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build duckdb connection with CNEFE data set — create_geocodebr_db","text":"","code":"create_geocodebr_db(db_path = tempdir(), n_cores = NULL)"},{"path":"https://ipeagit.github.io/geocodebr/reference/create_geocodebr_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build duckdb connection with CNEFE data set — create_geocodebr_db","text":"db_path character vector pointing existing directory persistent '.duckdb' file created. Defaults temporary directory tempdir(). n_cores number. number cores used parallel execution. Defaults 1.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/create_geocodebr_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build duckdb connection with CNEFE data set — create_geocodebr_db","text":"duckdb connection.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/create_index.html","id":null,"dir":"Reference","previous_headings":"","what":"create index — create_index","title":"create index — create_index","text":"create index","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/create_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create index — create_index","text":"","code":"create_index(con, tb, cols, operation, overwrite = TRUE)"},{"path":"https://ipeagit.github.io/geocodebr/reference/download_cnefe.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the CNEFE data set — download_cnefe","title":"Download the CNEFE data set — download_cnefe","text":"Downloads enriched version CNEFE (National Registry Addresses Statistical Purposes, portuguese) data set, purposefully built used package.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/download_cnefe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the CNEFE data set — download_cnefe","text":"","code":"download_cnefe(progress = TRUE, cache = TRUE)"},{"path":"https://ipeagit.github.io/geocodebr/reference/download_cnefe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the CNEFE data set — download_cnefe","text":"progress logical. Whether display download progress bar. Defaults TRUE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/download_cnefe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the CNEFE data set — download_cnefe","text":"Invisibly returns path directory data saved.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/download_cnefe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the CNEFE data set — download_cnefe","text":"","code":"download_cnefe(progress = FALSE)"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode Brazilian addresses — geocode","title":"Geocode Brazilian addresses — geocode","text":"Geocodes Brazilian addresses based CNEFE data. Addresses must passed data frame column describes one address field (street name, street number, neighborhood, etc). input addresses matched CNEFE following different precision levels info, please see Details section. output coordinates use geodetic reference system \"SIRGAS2000\", CRS(4674).","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode Brazilian addresses — geocode","text":"","code":"geocode(   addresses_table,   address_fields = setup_address_fields(),   n_cores = 1,   progress = TRUE,   keep_matched_address = FALSE,   cache = TRUE )"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode Brazilian addresses — geocode","text":"addresses_table data frame. addresses geocoded. column must represent address field. address_fields character vector. correspondence address field name column describes addresses_table. setup_address_fields() function helps creating vector performs checks input. Address fields passed NULL ignored function must receive least one non-null field. manually creating vector, please note vector names names used setup_address_fields() parameters. n_cores number. number cores used parallel execution. Defaults 1. progress logical. Whether display progress bars downloading CNEFE data geocoding addresses. Defaults TRUE. keep_matched_address Logical. Whethe output include column indicating matched address reference. Defaults FALSE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode Brazilian addresses — geocode","text":"Returns data frame passed addresses_table latitude (lat) longitude (lon) matched address, well two columns (precision match_type) indicating precision level address matched.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode Brazilian addresses — geocode","text":"Precision categories:","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"precision","dir":"Reference","previous_headings":"","what":"Precision","title":"Geocode Brazilian addresses — geocode","text":"results geocodebr classified six broad precision categories: \"numero\" \"numero_interpolado\" \"rua\" \"cep\" \"bairro\" \"municipio\" NA (found) precision level can disaggregated refined match types.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"match-type","dir":"Reference","previous_headings":"","what":"Match Type","title":"Geocode Brazilian addresses — geocode","text":"column match_type provides refined information exactly input address matched CNEFE. every category, geocodebr takes average latitude longitude addresses included CNEFE match input address based combinations different fields. strictest case, example, function finds deterministic match fields given address (estado, municipio, logradouro, numero, cep, localidade). Think example building several apartments match street address number. case, coordinates apartments differ slightly, geocodebr takes average coordinates. less rigorous example, fields (estado, municipio, rua, bairro) matched, geocodebr calculates average coordinates addresses CNEFE along street fall within neighborhood. complete list precision levels match type categories : Precision: \"numero\" match_type: en01: logradouro, numero, cep e bairro en02: logradouro, numero e cep en03: logradouro, numero e bairro en04: logradouro e numero pn01: logradouro, numero, cep e bairro pn02: logradouro, numero e cep pn03: logradouro, numero e bairro pn04: logradouro e numero Precision: \"numero_interpolado\" match_type: ei01: logradouro, numero, cep e bairro ei02: logradouro, numero e cep ei03: logradouro, numero e bairro ei04: logradouro e numero pi01: logradouro, numero, cep e bairro pi02: logradouro, numero e cep pi03: logradouro, numero e bairro pi04: logradouro e numero Precision: \"rua\" (input number missing 'S/N') match_type: er01: logradouro, cep e bairro er02: logradouro e cep er03: logradouro e bairro er04: logradouro pr01: logradouro, cep e bairro pr02: logradouro e cep pr03: logradouro e bairro pr04: logradouro Precision: \"cep\" match_type: ec01 municipio, cep, localidade ec02 municipio, cep Precision: \"bairro\" match_type: eb01 municipio, localidade Precision: \"municipio\" match_type: em01 municipio Note: Match types starting 'p' use probabilistic matching logradouro field, types starting 'e' use deterministic matching . Match types probabilistic matching implemented geocodebr yet.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode Brazilian addresses — geocode","text":"","code":"data_path <- system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") input_df <- read.csv(data_path)  fields <- geocodebr::setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\" )  df <- geocodebr::geocode(   addresses_table = input_df,   address_fields = fields,   progress = FALSE   )  head(df) #>   id            nm_logradouro Numero       Cep               Bairro #> 1  1 RUA MARIA LUCIA PACIFICO     17 26042-730           SANTA RITA #> 2  2      RUA LEOPOLDINA TOME     46 25030-050           CENTENARIO #> 3  3          RUA DONA JUDITE      0 23915-700          CAPUTERA II #> 4  4     RUA ALEXANDRE AMARAL      0 23098-120           SANTISSIMO #> 5  5                AVENIDA E    300 23860-000         PRAIA GRANDE #> 6  6      RUA PRINCESA ISABEL    263 69921-026 ESTACAO EXPERIMENTAL #>      nm_municipio code_muni          nm_uf       lon        lat match_type #> 1     NOVA IGUACU   3303500 RIO DE JANEIRO -43.47118 -22.695496       en01 #> 2 DUQUE DE CAXIAS   3301702 RIO DE JANEIRO -43.31134 -22.779173       en01 #> 3  ANGRA DOS REIS   3300100 RIO DE JANEIRO -44.20848 -22.978837       er01 #> 4  RIO DE JANEIRO   3304557 RIO DE JANEIRO -43.51150 -22.868992       er01 #> 5     MANGARATIBA   3302601 RIO DE JANEIRO -43.97214 -22.929864       en01 #> 6      RIO BRANCO   1200401           ACRE -67.83559  -9.963436       en01 #>   precision #> 1    number #> 2    number #> 3    street #> 4    street #> 5    number #> 6    number"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode Brazilian addresses — geocode_dani","title":"Geocode Brazilian addresses — geocode_dani","text":"Geocodes Brazilian addresses based CNEFE data. Addresses must passed data frame column describes one address field (street name, street number, neighborhood, etc). input addresses matched CNEFE following 12 different case patterns. info, please see Details section.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode Brazilian addresses — geocode_dani","text":"","code":"geocode_dani(   addresses_table,   address_fields = setup_address_fields(),   n_cores = 1,   progress = TRUE,   cache = TRUE )"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode Brazilian addresses — geocode_dani","text":"addresses_table data frame. addresses geocoded. column must represent address field. address_fields character vector. correspondence address field name column describes addresses_table. setup_address_fields() function helps creating vector performs checks input. Address fields passed NULL ignored function must receive least one non-null field. manually creating vector, please note vector names names used setup_address_fields() parameters. n_cores number. number cores used parallel execution. Defaults 1. progress logical. Whether display progress bars downloading CNEFE data geocoding addresses. Defaults TRUE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode Brazilian addresses — geocode_dani","text":"Returns data frame passed addresses_table latitude (lat) longitude (lon) matched address, well another column (match_type) indicating match level address matched.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode Brazilian addresses — geocode_dani","text":"input addresses deterministically matched CNEFE following 12 different case patterns. type match found address input data indicated match_type column output. every match type, function always calculates average latitude longitude addresses CNEFE match input address. strictest case, function finds perfect match fields given address. Think example building several apartments match street address. case, coordinates apartments differ slightly, geocodebr take average coordinates. hand, loosest case, state city matched, geocodebr takes city-wide average coordinates, tends favor densely populated areas. columns considered 12 different match types described : Case 01: estado, município, logradouro, número, cep e bairro; Case 02: estado, município, logradouro, número e cep; Case 03: estado, município, logradouro, número e bairro; Case 04: estado, município, logradouro e número; Case 05: estado, município, logradouro, cep e bairro; Case 06: estado, município, logradouro e cep; Case 07: estado, município, logradouro e bairro; Case 08: estado, município e logradouro; Case 09: estado, município, cep e bairro; Case 10: estado, município e cep; Case 11: estado, município e bairro; Case 12: estado, município.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode Brazilian addresses — geocode_dani","text":"","code":"data_path <- system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") input_df <- read.csv(data_path)  fields <- setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\" )  # df <- geocodebr:::geocode_dani(input_df, address_fields = fields, progress = FALSE) # df"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode Brazilian addresses — geocode_dani_arrow","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"Geocodes Brazilian addresses based CNEFE data. Addresses must passed data frame column describes one address field (street name, street number, neighborhood, etc). input addresses matched CNEFE following 12 different case patterns. info, please see Details section.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"","code":"geocode_dani_arrow(   addresses_table,   address_fields = setup_address_fields(),   n_cores = 1,   progress = TRUE,   cache = TRUE )"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"addresses_table data frame. addresses geocoded. column must represent address field. address_fields character vector. correspondence address field name column describes addresses_table. setup_address_fields() function helps creating vector performs checks input. Address fields passed NULL ignored function must receive least one non-null field. manually creating vector, please note vector names names used setup_address_fields() parameters. n_cores number. number cores used parallel execution. Defaults 1. progress logical. Whether display progress bars downloading CNEFE data geocoding addresses. Defaults TRUE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"Returns data frame passed addresses_table latitude (lat) longitude (lon) matched address, well another column (match_type) indicating match level address matched.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"input addresses deterministically matched CNEFE following 12 different case patterns. type match found address input data indicated match_type column output. every match type, function always calculates average latitude longitude addresses CNEFE match input address. strictest case, function finds perfect match fields given address. Think example building several apartments match street address. case, coordinates apartments differ slightly, geocodebr take average coordinates. hand, loosest case, state city matched, geocodebr takes city-wide average coordinates, tends favor densely populated areas. columns considered 12 different match types described : Case 01: estado, município, logradouro, número, cep e bairro; Case 02: estado, município, logradouro, número e cep; Case 03: estado, município, logradouro, número e bairro; Case 04: estado, município, logradouro e número; Case 05: estado, município, logradouro, cep e bairro; Case 06: estado, município, logradouro e cep; Case 07: estado, município, logradouro e bairro; Case 08: estado, município e logradouro; Case 09: estado, município, cep e bairro; Case 10: estado, município e cep; Case 11: estado, município e bairro; Case 12: estado, município.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_dani_arrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode Brazilian addresses — geocode_dani_arrow","text":"","code":"data_path <- system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") input_df <- read.csv(data_path)  fields <- setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\" )  # df <- geocodebr:::geocode_dani(input_df, address_fields = fields, progress = FALSE) # df"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode Brazilian addresses — geocode_db","title":"Geocode Brazilian addresses — geocode_db","text":"Geocodes Brazilian addresses based CNEFE data. Addresses must passed data frame column describes one address field (street name, street number, neighborhood, etc). input addresses matched CNEFE following different precision levels info, please see Details section. output coordinates use geodetic reference system \"SIRGAS2000\", CRS(4674).","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode Brazilian addresses — geocode_db","text":"","code":"geocode_db(   addresses_table,   address_fields = setup_address_fields(),   n_cores = 1,   progress = TRUE,   keep_matched_address = FALSE,   cache = TRUE )"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode Brazilian addresses — geocode_db","text":"addresses_table data frame. addresses geocoded. column must represent address field. address_fields character vector. correspondence address field name column describes addresses_table. setup_address_fields() function helps creating vector performs checks input. Address fields passed NULL ignored function must receive least one non-null field. manually creating vector, please note vector names names used setup_address_fields() parameters. n_cores number. number cores used parallel execution. Defaults 1. progress logical. Whether display progress bars downloading CNEFE data geocoding addresses. Defaults TRUE. keep_matched_address Logical. Whethe output include column indicating matched address reference. Defaults FALSE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode Brazilian addresses — geocode_db","text":"Returns data frame passed addresses_table latitude (lat) longitude (lon) matched address, well two columns (precision match_type) indicating precision level address matched.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode Brazilian addresses — geocode_db","text":"Precision categories:","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"precision","dir":"Reference","previous_headings":"","what":"Precision","title":"Geocode Brazilian addresses — geocode_db","text":"results geocodebr classified six broad precision categories: \"numero\" \"numero_interpolado\" \"rua\" \"cep\" \"bairro\" \"municipio\" NA (found) precision level can disaggregated refined match types.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"match-type","dir":"Reference","previous_headings":"","what":"Match Type","title":"Geocode Brazilian addresses — geocode_db","text":"column match_type provides refined information exactly input address matched CNEFE. every category, geocodebr takes average latitude longitude addresses included CNEFE match input address based combinations different fields. strictest case, example, function finds deterministic match fields given address (estado, municipio, logradouro, numero, cep, localidade). Think example building several apartments match street address number. case, coordinates apartments differ slightly, geocodebr takes average coordinates. less rigorous example, fields (estado, municipio, rua, bairro) matched, geocodebr calculates average coordinates addresses CNEFE along street fall within neighborhood. complete list precision levels match type categories : Precision: \"numero\" match_type: en01: logradouro, numero, cep e bairro en02: logradouro, numero e cep en03: logradouro, numero e bairro en04: logradouro e numero pn01: logradouro, numero, cep e bairro pn02: logradouro, numero e cep pn03: logradouro, numero e bairro pn04: logradouro e numero Precision: \"numero_interpolado\" match_type: ei01: logradouro, numero, cep e bairro ei02: logradouro, numero e cep ei03: logradouro, numero e bairro ei04: logradouro e numero pi01: logradouro, numero, cep e bairro pi02: logradouro, numero e cep pi03: logradouro, numero e bairro pi04: logradouro e numero Precision: \"rua\" (input number missing 'S/N') match_type: er01: logradouro, cep e bairro er02: logradouro e cep er03: logradouro e bairro er04: logradouro pr01: logradouro, cep e bairro pr02: logradouro e cep pr03: logradouro e bairro pr04: logradouro Precision: \"cep\" match_type: ec01 municipio, cep, localidade ec02 municipio, cep Precision: \"bairro\" match_type: eb01 municipio, localidade Precision: \"municipio\" match_type: em01 municipio Note: Match types starting 'p' use probabilistic matching logradouro field, types starting 'e' use deterministic matching . Match types probabilistic matching implemented geocodebr yet.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode Brazilian addresses — geocode_db","text":"","code":"data_path <- system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") input_df <- read.csv(data_path)  fields <- geocodebr::setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\" )  df <- geocodebr::geocode(   addresses_table = input_df,   address_fields = fields,   progress = FALSE   )  head(df) #>   id            nm_logradouro Numero       Cep               Bairro #> 1  1 RUA MARIA LUCIA PACIFICO     17 26042-730           SANTA RITA #> 2  2      RUA LEOPOLDINA TOME     46 25030-050           CENTENARIO #> 3  3          RUA DONA JUDITE      0 23915-700          CAPUTERA II #> 4  4     RUA ALEXANDRE AMARAL      0 23098-120           SANTISSIMO #> 5  5                AVENIDA E    300 23860-000         PRAIA GRANDE #> 6  6      RUA PRINCESA ISABEL    263 69921-026 ESTACAO EXPERIMENTAL #>      nm_municipio code_muni          nm_uf       lon        lat match_type #> 1     NOVA IGUACU   3303500 RIO DE JANEIRO -43.47118 -22.695496       en01 #> 2 DUQUE DE CAXIAS   3301702 RIO DE JANEIRO -43.31134 -22.779173       en01 #> 3  ANGRA DOS REIS   3300100 RIO DE JANEIRO -44.20848 -22.978837       er01 #> 4  RIO DE JANEIRO   3304557 RIO DE JANEIRO -43.51150 -22.868992       er01 #> 5     MANGARATIBA   3302601 RIO DE JANEIRO -43.97214 -22.929864       en01 #> 6      RIO BRANCO   1200401           ACRE -67.83559  -9.963436       en01 #>   precision #> 1    number #> 2    number #> 3    street #> 4    street #> 5    number #> 6    number"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_rafa.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocoding addresses based on CNEFE data — geocode_rafa","title":"Geocoding addresses based on CNEFE data — geocode_rafa","text":"Takes data frame containing addresses input returns spatial coordinates found based CNEFE data.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_rafa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocoding addresses based on CNEFE data — geocode_rafa","text":"","code":"geocode_rafa(   addresses_table,   address_fields = setup_address_fields(),   n_cores = 1,   progress = TRUE,   cache = TRUE )"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_rafa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocoding addresses based on CNEFE data — geocode_rafa","text":"addresses_table data frame. addresses geocoded. column must represent address field. address_fields character vector. correspondence address field name column describes addresses_table. setup_address_fields() function helps creating vector performs checks input. Address fields passed NULL ignored function must receive least one non-null field. manually creating vector, please note vector names names used setup_address_fields() parameters. n_cores number. number cores used parallel execution. Defaults 1. progress logical. Whether display progress bars downloading CNEFE data geocoding addresses. Defaults TRUE. cache logical. Whether CNEFE data saved /read cache, reducing processing time future calls. Defaults TRUE. FALSE, CNEFE data downloaded temporary directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_rafa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocoding addresses based on CNEFE data — geocode_rafa","text":"arrow Dataset \"data.frame\" object.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/geocode_rafa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocoding addresses based on CNEFE data — geocode_rafa","text":"","code":"data_path <- system.file(\"extdata/small_sample.csv\", package = \"geocodebr\") input_df <- read.csv(data_path)  fields <- setup_address_fields(   logradouro = \"nm_logradouro\",   numero = \"Numero\",   cep = \"Cep\",   bairro = \"Bairro\",   municipio = \"nm_municipio\",   estado = \"nm_uf\" )  #df <- geocodebr:::geocode_rafa( #  addresses_table = input_df, #  address_fields = fields, #  progress = FALSE #  ) # #head(df)"},{"path":"https://ipeagit.github.io/geocodebr/reference/geocodebr.html","id":null,"dir":"Reference","previous_headings":"","what":"geocodebr: Geocode Brazilian Addresses with CNEFE — geocodebr","title":"geocodebr: Geocode Brazilian Addresses with CNEFE — geocodebr","text":"Simple efficient way geocode data Brazil. package provides functions geocode addresses spatial coordinates (soon) reverse-geocode spatial coordinates addresses. package built top open spatial data sets Brazilian addresses, mainly using National Registry Addresses Statistical Purposes (English *Cadastro Nacional de Endereços para Fins Estatísticos*, CNEFE). CNEFE published Brazilian official statistics geography office, IBGE (https://www.ibge.gov.br/estatisticas/sociais/populacao/38734-cadastro-nacional-de-enderecos-para-fins-estatisticos.html).","code":""},{"path":[]},{"path":"https://ipeagit.github.io/geocodebr/reference/geocodebr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geocodebr: Geocode Brazilian Addresses with CNEFE — geocodebr","text":"Maintainer: Daniel Herszenhut dhersz@gmail.com (ORCID) Authors: Rafael H. M. Pereira (ORCID) contributors: Ipea - Institute Applied Economic Research [copyright holder, funder]","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/get_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cache directory used in geocodebr — get_cache_dir","title":"Get the cache directory used in geocodebr — get_cache_dir","text":"Gets directory used cache CNEFE data. Useful inspect directory set set_cache_dir() previous R session. Returns default cache directory custom directory previously set.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/get_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cache directory used in geocodebr — get_cache_dir","text":"","code":"get_cache_dir()"},{"path":"https://ipeagit.github.io/geocodebr/reference/get_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cache directory used in geocodebr — get_cache_dir","text":"cache directory path.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/get_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cache directory used in geocodebr — get_cache_dir","text":"","code":"get_cache_dir() #> [1] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0\""},{"path":"https://ipeagit.github.io/geocodebr/reference/list_cached_data.html","id":null,"dir":"Reference","previous_headings":"","what":"List cached data — list_cached_data","title":"List cached data — list_cached_data","text":"Lists data saved inside cached directory.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/list_cached_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List cached data — list_cached_data","text":"","code":"list_cached_data(print_tree = FALSE)"},{"path":"https://ipeagit.github.io/geocodebr/reference/list_cached_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List cached data — list_cached_data","text":"print_tree logical. Whether print contents cache directory tree-like format. Defaults FALSE.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/list_cached_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List cached data — list_cached_data","text":"path cached data.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/list_cached_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List cached data — list_cached_data","text":"","code":"list_cached_data() #>  [1] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio.parquet\"                                  #>  [2] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_cep.parquet\"                              #>  [3] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_cep_localidade.parquet\"                   #>  [4] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_localidade.parquet\"                       #>  [5] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro.parquet\"                       #>  [6] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_cep.parquet\"                   #>  [7] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_cep_localidade.parquet\"        #>  [8] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_localidade.parquet\"            #>  [9] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero.parquet\"                #> [10] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_cep.parquet\"            #> [11] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_cep_localidade.parquet\" #> [12] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_localidade.parquet\"      list_cached_data(print_tree = TRUE) #> /home/runner/.cache/R/geocodebr/data_release_v0.1.0 #> ├── municipio.parquet #> ├── municipio_cep.parquet #> ├── municipio_cep_localidade.parquet #> ├── municipio_localidade.parquet #> ├── municipio_logradouro.parquet #> ├── municipio_logradouro_cep.parquet #> ├── municipio_logradouro_cep_localidade.parquet #> ├── municipio_logradouro_localidade.parquet #> ├── municipio_logradouro_numero.parquet #> ├── municipio_logradouro_numero_cep.parquet #> ├── municipio_logradouro_numero_cep_localidade.parquet #> └── municipio_logradouro_numero_localidade.parquet #>  [1] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio.parquet\"                                  #>  [2] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_cep.parquet\"                              #>  [3] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_cep_localidade.parquet\"                   #>  [4] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_localidade.parquet\"                       #>  [5] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro.parquet\"                       #>  [6] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_cep.parquet\"                   #>  [7] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_cep_localidade.parquet\"        #>  [8] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_localidade.parquet\"            #>  [9] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero.parquet\"                #> [10] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_cep.parquet\"            #> [11] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_cep_localidade.parquet\" #> [12] \"/home/runner/.cache/R/geocodebr/data_release_v0.1.0/municipio_logradouro_numero_localidade.parquet\""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — lookup_cases","title":"Match aggregated cases with left_join — lookup_cases","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — lookup_cases","text":"","code":"lookup_cases(   con,   relevant_cols,   case,   lookup_vector,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — lookup_cases","text":"con db connection input_states Vector. Passed input_municipio Vector. Passed x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Integer. integer","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — lookup_cases","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_weighted_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — lookup_weighted_cases","title":"Match aggregated cases with left_join — lookup_weighted_cases","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_weighted_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — lookup_weighted_cases","text":"","code":"lookup_weighted_cases(   con,   relevant_cols,   case,   lookup_vector,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_weighted_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — lookup_weighted_cases","text":"con db connection input_states Vector. Passed input_municipio Vector. Passed x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Integer. integer","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/lookup_weighted_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — lookup_weighted_cases","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — match_cases","title":"Match aggregated cases with left_join — match_cases","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — match_cases","text":"","code":"match_cases(   con,   x,   y,   output_tb,   key_cols,   match_type,   keep_matched_address,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — match_cases","text":"con db connection x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Integer. integer input_states Vector. Passed input_municipio Vector. Passed ","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — match_cases","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases2.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — match_cases2","title":"Match aggregated cases with left_join — match_cases2","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — match_cases2","text":"","code":"match_cases2(   con,   x,   y,   output_tb,   key_cols,   match_type,   keep_matched_address,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — match_cases2","text":"con db connection x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Integer. integer input_states Vector. Passed input_municipio Vector. Passed ","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_cases2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — match_cases2","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — match_weighted_cases","title":"Match aggregated cases with left_join — match_weighted_cases","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — match_weighted_cases","text":"","code":"match_weighted_cases(   con,   x,   y,   output_tb,   key_cols,   match_type,   keep_matched_address,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — match_weighted_cases","text":"con db connection x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Character. input_states Vector. Passed input_municipio Vector. Passed ","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — match_weighted_cases","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases2.html","id":null,"dir":"Reference","previous_headings":"","what":"Match aggregated cases with left_join — match_weighted_cases2","title":"Match aggregated cases with left_join — match_weighted_cases2","text":"Match aggregated cases left_join","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match aggregated cases with left_join — match_weighted_cases2","text":"","code":"match_weighted_cases2(   con,   x,   y,   output_tb,   key_cols,   match_type,   keep_matched_address,   input_states,   input_municipio )"},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match aggregated cases with left_join — match_weighted_cases2","text":"con db connection x String. Name table written con y String. Name table written con output_tb Name new table written con key_cols Vector. Vector names columns perform left join match_type Character. input_states Vector. Passed input_municipio Vector. Passed ","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/match_weighted_cases2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match aggregated cases with left_join — match_weighted_cases2","text":"Writes result left join new table con","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/set_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the cache directory used in geocodebr — set_cache_dir","title":"Set the cache directory used in geocodebr — set_cache_dir","text":"Sets directory used cache CNEFE data. configuration persistent across different R sessions.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/set_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the cache directory used in geocodebr — set_cache_dir","text":"","code":"set_cache_dir(path = NULL)"},{"path":"https://ipeagit.github.io/geocodebr/reference/set_cache_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the cache directory used in geocodebr — set_cache_dir","text":"path string. path directory used cache data. NULL (default), package use versioned directory saved inside directory returned tools::R_user_dir().","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/set_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the cache directory used in geocodebr — set_cache_dir","text":"Invisibly returns cache directory path.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/set_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the cache directory used in geocodebr — set_cache_dir","text":"","code":"set_cache_dir(tempdir()) #> ℹ Setting cache directory to /tmp/RtmpYdQP6l.  # back to default set_cache_dir(NULL) #> ℹ Setting cache directory to #>   /home/runner/.cache/R/geocodebr/data_release_v0.1.0."},{"path":"https://ipeagit.github.io/geocodebr/reference/setup_address_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the columns describing the address fields — setup_address_fields","title":"Specify the columns describing the address fields — setup_address_fields","text":"Creates character vector specifying columns represent address field addresses table.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/setup_address_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the columns describing the address fields — setup_address_fields","text":"","code":"setup_address_fields(   logradouro = NULL,   numero = NULL,   cep = NULL,   bairro = NULL,   municipio = NULL,   estado = NULL )"},{"path":"https://ipeagit.github.io/geocodebr/reference/setup_address_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the columns describing the address fields — setup_address_fields","text":"logradouro string. name column representing logradouro (street address) address. May NULL field specified addresses table. numero string. name column representing street number address. May NULL field specified addresses table. cep string. name column representing CEP (ZIP code) address. May NULL field specified addresses table. bairro string. name column representing neighborhood address. May NULL field specified addresses table. municipio string. name column representing city address. May NULL field specified addresses table. estado string. name column representing state address. May NULL field specified addresses table.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/setup_address_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the columns describing the address fields — setup_address_fields","text":"character vector names address fields values columns represent addresses table.","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/setup_address_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify the columns describing the address fields — setup_address_fields","text":"","code":"setup_address_fields(   logradouro = \"Nome_logradouro\",   numero = \"Numero\",   cep = \"CEP\",   bairro = \"Bairro\",   municipio = \"Cidade\",   estado = \"UF\" ) #>        logradouro            numero               cep            bairro  #> \"Nome_logradouro\"          \"Numero\"             \"CEP\"          \"Bairro\"  #>         municipio            estado  #>          \"Cidade\"              \"UF\""},{"path":"https://ipeagit.github.io/geocodebr/reference/update_input_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Update input_padrao_db to remove observations previously matched — update_input_db","title":"Update input_padrao_db to remove observations previously matched — update_input_db","text":"Update input_padrao_db remove observations previously matched","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/update_input_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update input_padrao_db to remove observations previously matched — update_input_db","text":"","code":"update_input_db(con, update_tb = \"input_padrao_db\", reference_tb)"},{"path":"https://ipeagit.github.io/geocodebr/reference/update_input_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update input_padrao_db to remove observations previously matched — update_input_db","text":"con db connection update_tb String. Name table updated con reference_tb table written con used reference","code":""},{"path":"https://ipeagit.github.io/geocodebr/reference/update_input_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update input_padrao_db to remove observations previously matched — update_input_db","text":"Drops observations input_padrao_db","code":""},{"path":"https://ipeagit.github.io/geocodebr/news/index.html","id":"geocodebr-development-version","dir":"Changelog","previous_headings":"","what":"geocodebr (development version)","title":"geocodebr (development version)","text":"First version.","code":""}]
